#----------------------------------------------------------------------------
#	MAKEFILE.GFX
#
#	Makes all the graphics and data needed for the game
#
#	Tabbed for 5 9 (Please do not change)
#
#	Created:	10th February 1999 GRLiddon()
#
#	Copyright (C) 1997-1999 G R Liddon
#----------------------------------------------------------------------------

#----------------------------------------------------------------------------
#	Default Target
#	--------------
.PHONY: default
default: all

#----------------------------------------------------------------------------
#	Name of the project
#	--------------------
PROJ :=			spongey

#----------------------------------------------------------------------------

BUILD_DIR :=	build

#----------------------------------------------------------------------------
#	Includes
#	--------
include $(BUILD_DIR)/globals.mak
include $(BUILD_DIR)/getuser.mak
include $(BUILD_DIR)/parse.mak
include $(BUILD_DIR)/outdirs.mak

TEMP_FILE :=			$(TEMP_BUILD_DIR)/build.tmp

#----------------------------------------------------------------------------
#--- Levels -----------------------------------------------------------------
#----------------------------------------------------------------------------
LEVELS_OPTS :=				-t:8,3,1 -s:256
LEVELS_IN_DIR :=			$(GRAF_DIR)/levels
LEVELS_OUT_DIR :=			$(DATA_OUT)/levels
LEVELS_MAKEFILE_DIR :=		$(TEMP_BUILD_DIR)/levels
LEVELS_DIRS_TO_MAKE :=		$(LEVELS_MAKEFILE_DIR) $(LEVELS_OUT_DIR)

LEVELS_CHAPTERS :=			CHAPTER01 CHAPTER02 CHAPTER03 CHAPTER04 CHAPTER05

LEVELS_CHAPTER01 :=			
LEVELS_CHAPTER01_LEVEL01 :=
LEVELS_CHAPTER01_LEVEL02 :=
LEVELS_CHAPTER01_LEVEL03 :=
LEVELS_CHAPTER01_LEVEL04 :=

LEVELS_CHAPTER02 :=			
LEVELS_CHAPTER02_LEVEL01 :=
LEVELS_CHAPTER02_LEVEL02 :=
LEVELS_CHAPTER02_LEVEL03 :=
LEVELS_CHAPTER02_LEVEL04 :=	

LEVELS_CHAPTER03 :=			LEVEL03	LEVEL04
LEVELS_CHAPTER03_LEVEL01 :=
LEVELS_CHAPTER03_LEVEL02 :=
LEVELS_CHAPTER03_LEVEL03 := 01 02 03 04 05 06
LEVELS_CHAPTER03_LEVEL04 :=	01 02 03 04 04x 05 06

LEVELS_CHAPTER04 :=			LEVEL01 LEVEL02 LEVEL03 LEVEL04
LEVELS_CHAPTER04_LEVEL01 :=	01 02 03 04
LEVELS_CHAPTER04_LEVEL02 :=	01 02 03 04 05
LEVELS_CHAPTER04_LEVEL03 :=	01 02 03 04 05 06
LEVELS_CHAPTER04_LEVEL04 :=	01 02 03 04 05 06 07

LEVELS_CHAPTER05 :=			
LEVELS_CHAPTER05_LEVEL01 :=
LEVELS_CHAPTER05_LEVEL02 :=
LEVELS_CHAPTER05_LEVEL03 :=
LEVELS_CHAPTER05_LEVEL04 :=

LEVELS_CHAPTER06 :=			
LEVELS_CHAPTER06_LEVEL01 :=
LEVELS_CHAPTER06_LEVEL02 :=
LEVELS_CHAPTER06_LEVEL03 :=
LEVELS_CHAPTER06_LEVEL04 :=


LEVELS_MAKEFILES :=		$(foreach CHAPTER,$(LEVELS_CHAPTERS),$(foreach LEVEL,$(LEVELS_$(CHAPTER)),$(LEVELS_MAKEFILE_DIR)/$(CHAPTER)_$(LEVEL).mak))

$(LEVELS_MAKEFILES):	$(LEVELS_DIRS_TO_MAKE) makefile.gfx $(BUILD_DIR)/mklevel.pl
	@$(PL) $(BUILD_DIR)/mklevel.pl $@ $(notdir $(basename $@))

include $(LEVELS_MAKEFILES)

LEVELS_ALL_OUT :=		$(foreach CHAPTER,$(LEVELS_CHAPTERS),$(foreach LEVEL,$(LEVELS_$(CHAPTER)),$($(CHAPTER)_$(LEVEL)_OUT)))

GFX_DATA_OUT +=    		$(LEVELS_ALL_OUT)

levels : $(LEVELS_ALL_OUT)
	@$(ECHO) Levels made

cleanlevels : 	$(foreach CHAPTER,$(LEVELS_CHAPTERS),$(foreach LEVEL,$(LEVELS_$(CHAPTER)), clean$(CHAPTER)_$(LEVEL)))
				@$(ECHO) Levels cleaned


#----------------------------------------------------------------------------
# Collision data
#----------------------------------------------------------------------------

COLLISION_IN		:=	$(TOOL_DIR)/mapedit/collision.bmp

COLLISION_OUT_DIR	:=	$(DATA_OUT)/collision
COLLISION_OUT		:=	$(COLLISION_OUT_DIR)/colltab.dat

collision : $(COLLISION_OUT)

cleancollision:
	@$(RM) -f $(COLLISION_OUT)
	@$(ECHO) Collision table cleaned

$(COLLISION_OUT) : $(COLLISION_IN)
	@$(DATA_BIN_DIR)/mkcoltab $(COLLISION_IN) -o:$(COLLISION_OUT)

GRAF_DIRS_TO_MAKE	+=	$(COLLISION_OUT_DIR)
GFX_DATA_OUT		+=	$(COLLISION_OUT)


#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Actors
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
ACTOR_IN_DIR :=			$(GRAF_DIR)/Characters
ACTOR_OUT_DIR :=		$(DATA_OUT)/Actors
ACTOR_MAKEFILE_DIR :=	$(TEMP_BUILD_DIR)/Actors
ACTORS_DIRS_TO_MAKE :=	$(ACTOR_MAKEFILE_DIR) $(ACTOR_OUT_DIR)

# Global flags
GENERIC_ACT_TEX_FLAGS =	-c+ -t:27,1,1 -w+ -b+
GEN_GRP_TEX_FLAGS=		-t:28,1,1

actors:			player
	
cleanactors:	cleanplayer

#----------------------------------------------------------------------------
# Player
#----------------------------------------------------------------------------

PLAYER_FILE :=		Spongebob
PLAYER_IN_DIR:=		$(ACTOR_IN_DIR)/$(PLAYER_FILE)
PLAYER_OUT_DIR :=	$(ACTOR_OUT_DIR)
PLAYER_INC_FILE :=	$(INC_DIR)/Actor_$(PLAYER_FILE).h

PLAYER_MOD_IN :=	$(PLAYER_IN_DIR)/$(PLAYER_FILE).Gin
PLAYER_MOD_OUT :=	$(PLAYER_OUT_DIR)/$(PLAYER_FILE).a3d
PLAYER_TEX_DIR :=	$(PLAYER_IN_DIR)/textures
PLAYER_TEX_IN :=	$(PLAYER_TEX_DIR)/*.bmp
PLAYER_TEX_OUT :=	$(PLAYER_OUT_DIR)/$(PLAYER_FILE).Tex


PLAYER_EXTRA_TEX :=	SBBackNormal \
					SBEyesAngry SBEyesBlink SBEyesDown SBEyesfiece SBEyesLeft SBEyesNormal SBEyesRight SBEyesSheepish SBEyesUp SBEyesWorried \
					SBHandNormal \
					SBMouthGasp SBMouthNormal SBMouthSheepish SBMouthSmile SBMouthTerror SBMouthWhistle \
					SBPantsideNormal \
					SBPantsNormal \
					SBSideNormal \
					SBSocksNormal \
					SBSoleNormal \
					SBTopNormal

PLAYER_EXTRA_TEX_LIST :=	$(foreach FILE,	$(PLAYER_EXTRA_TEX),-a:textures/$(FILE).bmp)

PLAYER_DEP_IN :=	$(PLAYER_MOD_IN) $(PLAYER_TEX_IN)
PLAYER_DEP_OUT :=	$(PLAYER_MOD_OUT) $(PLAYER_TEX_OUT)

player: $(PLAYER_DEP_OUT)
	
cleanplayer:
	@$(RM) -f $(PLAYER_DEP_OUT)
	@$(ECHO) Player Cleaned
	
$(PLAYER_DEP_OUT) : $(PLAYER_DEP_IN)
	@$(MKACTOR3D) $(PLAYER_MOD_IN) -o:$(PLAYER_OUT_DIR) -t:24,1,1 -s:256 -i:$(PLAYER_INC_FILE) $(PLAYER_EXTRA_TEX_LIST)

GFX_DATA_OUT +=	$(PLAYER_DEP_OUT)



#----------------------------------------------------------------------------
# Animations
#----------------------------------------------------------------------------
anims:					playeranims
cleananims:				cleanplayeranims

ANIM_OUT_DIR :=			$(DATA_OUT)/anims
PLAYER_ANIM_IN_DIR :=	$(ACTOR_IN_DIR)/SpongeBob

# DUFF_ANIMS			deathfall runjumpend runjumpstart
PLAYER_ANIM_LIST :=		buttbounceend buttbouncestart deathbackwards deathdry  deathforwards deathspin deathtar electricshock electricshockend electricshockstart faceback facefront \
						fall getup getuprun hitground hover hoverend hoverstart idlebreathe idlehoola idlelook idlewigglearm jumpend karate run \
						runstart runstop soakup talk01 teeterback teeterfront \
						idlewind

PLAYER_ANIM_IN :=		$(foreach FILE,	$(PLAYER_ANIM_LIST),$(PLAYER_ANIM_IN_DIR)/$(FILE).gin)
PLAYER_ANIM_OUT :=		$(ANIM_OUT_DIR)/Player.Abk
PLAYER_ANIM_INC :=		$(INC_DIR)/Player_Anim.h

playeranims:			$(PLAYER_ANIM_IN)

cleanplayeranims:		
	@$(RM) -f $(PLAYER_ANIM_OUT)
	@$(ECHO) Player Anims Cleaned

$(PLAYER_ANIM_OUT) : $(PLAYER_ANIM_IN)
	@$(MKANIM3D) $(PLAYER_ANIM_IN) -o:$(PLAYER_ANIM_OUT) -i:$(PLAYER_ANIM_INC) -s:256
GFX_DATA_OUT +=	$(PLAYER_ANIM_OUT)

#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
#	Text translations
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
.PHONY: translate cleantranslate

LANGUAGES :=	swe \
				dut \
				ita \
				ger


TRANS_IN_DIR :=			$(GAME_DATA_DIR)/translations
TRANS_OUT_DIR :=		$(DATA_OUT)/translations
TRANS_LBM_OUT_DIR :=	$(REPORT_DIR)/translations

TRANS_IN_ENG :=			$(TRANS_IN_DIR)/text.dat

TRANS_FINAL_DAT_FILE :=	$(TRANS_OUT_DIR)/final.dat

ALL_TRANS_OUT_DIRS :=	$(TRANS_OUT_DIR) \
						$(TRANS_LBM_OUT_DIR)

ALL_TRANS_IN_FILES :=	$(foreach FILE,$(LANGUAGES),$(TRANS_IN_DIR)/$(FILE).dat)

TRANS_IN_FILES :=	$(TRANS_IN_ENG) $(ALL_TRANS_IN_FILES)

TRANS_OUT_DAT :=	$(foreach FILE,	$(LANGUAGES),$(TRANS_OUT_DIR)/$(FILE).dat) $(TRANS_OUT_DIR)/id.dat $(TRANS_OUT_DIR)/eng.dat
#$(TRANS_OUT_KANJI_TAB)
TRANS_OUT_HDR :=	$(INC_DIR)/trans.h

SCRIPT_TRANS_HDR :=	$(GAME_DATA_DIR)/scripts/defs/trans.scr

TRANS_OUT_FILES :=	$(TRANS_OUT_HDR) $(TRANS_OUT_DAT) $(TRANS_OUT_LBM_LIST) $(TRANS_FINAL_DAT_FILE)

$(TRANS_OUT_FILES) : $(TRANS_IN_FILES)
	@perl tools/perl/pl/lang.pl $(TRANS_IN_ENG)  $(TRANS_FINAL_DAT_FILE) $(ALL_TRANS_IN_FILES)
	@transtext $(LANG_OP) -h:$(TRANS_OUT_HDR) -o:$(TRANS_OUT_DIR) $(TRANS_FINAL_DAT_FILE)
	@perl tools/perl/pl/text_extract.pl $(TRANS_OUT_HDR) $(SCRIPT_TRANS_HDR) STR__INGAME__

translate : $(TRANS_OUT_FILES)
	@$(ECHO) made translations

cleantranslate:
	@$(RM) -f $(TRANS_OUT_FILES)
	@$(ECHO) Translations Cleaned

GFX_DATA_OUT +=	$(TRANS_OUT_DAT)

#----------------------------------------------------------------------------
#--- UI ---------------------------------------------------------------------
#----------------------------------------------------------------------------
UI_GFX_DIR :=				$(GRAF_DIR)/ui
UI_FONT_DIR :=				$(GRAF_DIR)/font
UI_GFX_OUT_DIR :=			$(DATA_OUT)/ui

UI_GFX_FONT :=				smallfont
UI_GFX_FONT_IN :=			$(foreach DIR,$(UI_GFX_FONT),$(UI_FONT_DIR)/$(DIR)/*.bmp)

UI_GFX_NONTRANS :=			faces\mr_krabs.bmp faces\patrick.bmp faces\plankton.bmp \
							faces\sandy.bmp faces\spongebob.bmp faces\squidward.bmp \
							faces\mermaidman.bmp faces\barnacleboy.bmp faces\jack_custard.bmp
UI_GFX_NONTRANS_IN :=		$(foreach FILE,$(UI_GFX_NONTRANS),$(UI_GFX_DIR)/$(FILE))

UI_GFX_TRANS :=				+vbamboo.bmp +vbambootl.bmp +vbambootr.bmp +vbamboobl.bmp +vbamboobr.bmp \
							+hbamboo.bmp +hbambootl.bmp +hbambootr.bmp +hbamboobl.bmp +hbamboobr.bmp \
							+butU.bmp +butD.bmp +butL.bmp +butR.bmp \
							+butC.bmp +butS.bmp +butX.bmp +butT.bmp
UI_GFX_TRANS_IN :=			$(foreach FILE,$(UI_GFX_TRANS),$(UI_GFX_DIR)/$(FILE))

UI_GFX_TEX_IN :=			$(UI_GFX_FONT_IN) ${UI_GFX_NONTRANS_IN} ${UI_GFX_TRANS_IN}
UI_GFX_TEX_OUT :=			$(UI_GFX_OUT_DIR)/UIGfx.Spr
UI_GFX_REP_FILE :=			$(REPORT_DIR)/UIGfx.rep
UI_GFX_HDR_FILE :=			$(INC_DIR)/UIGfx.h

cleanui :
		@$(RM) -f $(UI_GFX_TEX_OUT)
		@$(ECHO) UI Gfx Cleaned

ui: 		$(UI_GFX_TEX_IN)

$(UI_GFX_TEX_OUT) :	$(UI_GFX_TEX_IN)
		@parkgrab -c+ -z+ $(UI_GFX_FONT_IN) ${UI_GFX_TRANS_IN} -c- -z- ${UI_GFX_NONTRANS_IN} -b+ -t:31,1,1 -l:$(REPORT_DIR)/ui.lbm -o:$(UI_GFX_TEX_OUT) -k:$(UI_GFX_REP_FILE)
		@$(MV) -f $(UI_GFX_OUT_DIR)/uigfx.h $(UI_GFX_HDR_FILE)

GFX_DATA_OUT +=	$(UI_GFX_TEX_OUT)

#----------------------------------------------------------------------------
# Ingame graphic effects
# Also contins pickup graphics at the moment..
#----------------------------------------------------------------------------
INGAMEFX_GFX_DIR :=			$(GRAF_DIR)/ingamefx
INGAMEFX_GFX_OUT_DIR :=		$(DATA_OUT)/ingamefx

INGAMEFX_GFX_NONTRANS :=			
INGAMEFX_GFX_NONTRANS_IN :=	$(foreach FILE,$(INGAMEFX_GFX_NONTRANS),$(INGAMEFX_NONTRANS_DIR)/$(FILE))

PICKUP_GFX_DIR :=			$(GRAF_DIR)/pickups
PICKUP_GFX :=				+spatula +pants +health100 +health50 +health25 +glint1 +glint2 +glint3 +glint4 \
							+jellyammo +bubblemixture +glasses +shoe +balloon +helmet \
							+teeth 
PICKUP_GFX_IN :=			$(foreach FILE,$(PICKUP_GFX),$(PICKUP_GFX_DIR)/$(FILE).bmp)

INGAMEFX_GFX_TRANS :=		+bubble_1 +bubble_2 +bubble_3
INGAMEFX_GFX_TRANS_IN :=	$(foreach FILE,$(INGAMEFX_GFX_TRANS),$(INGAMEFX_GFX_DIR)/$(FILE).bmp)

INGAMEFX_GFX_TEX_IN :=		${INGAMEFX_GFX_NONTRANS_IN} ${INGAMEFX_GFX_TRANS_IN} ${PICKUP_GFX_IN}
INGAMEFX_GFX_TEX_OUT :=		$(INGAMEFX_GFX_OUT_DIR)/ingamefx.Spr
INGAMEFX_GFX_REP_FILE :=	$(REPORT_DIR)/ingamefx.rep
INGAMEFX_GFX_HDR_FILE :=	$(INC_DIR)/ingamefx.h

cleaningamefx :
		@$(RM) -f $(INGAMEFX_GFX_TEX_OUT)
		@$(ECHO) InGame GFx Cleaned

ingamefx:		$(INGAMEFX_GFX_TEX_IN)

$(INGAMEFX_GFX_TEX_OUT) :	$(INGAMEFX_GFX_TEX_IN)
		@parkgrab -z+ ${INGAMEFX_GFX_TRANS_IN} ${PICKUP_GFX_IN} -z- ${INGAMEFX_GFX_NONTRANS_IN} -b+ -t:29,1,1 -l:$(REPORT_DIR)/ingamefx.lbm -o:$(INGAMEFX_GFX_TEX_OUT) -k:$(INGAMEFX_GFX_REP_FILE)
		@$(MV) -f $(INGAMEFX_GFX_OUT_DIR)/ingamefx.h $(INGAMEFX_GFX_HDR_FILE)

GRAF_DIRS_TO_MAKE	+=		$(INGAMEFX_GFX_OUT_DIR)
GFX_DATA_OUT		+=		$(INGAMEFX_GFX_TEX_OUT)


#----------------------------------------------------------------------------
# Front end graphics
#----------------------------------------------------------------------------
FRONTEND_GFX_DIR :=			$(GRAF_DIR)/frontend
FRONTEND_GFX_OUT_DIR :=		$(DATA_OUT)/frontend

FRONTEND_GFX_NONTRANS :=	sky.bmp
FRONTEND_GFX_NONTRANS_IN :=	$(foreach FILE,$(FRONTEND_GFX_NONTRANS),$(FRONTEND_GFX_DIR)/$(FILE))

FRONTEND_GFX_TRANS :=		+bg1.bmp
FRONTEND_GFX_TRANS_IN :=	$(foreach FILE,$(FRONTEND_GFX_TRANS),$(FRONTEND_GFX_DIR)/$(FILE))

FRONTEND_GFX_TRANS_NO_ROT :=		+island.bmp +sblogo.bmp
FRONTEND_GFX_TRANS_NO_ROT_IN :=		$(foreach FILE,$(FRONTEND_GFX_TRANS_NO_ROT),$(FRONTEND_GFX_DIR)/$(FILE))

FRONTEND_GFX_TEX_IN :=		${FRONTEND_GFX_NONTRANS_IN} ${FRONTEND_GFX_TRANS_IN}  ${FRONTEND_GFX_TRANS_NO_ROT_IN}
FRONTEND_GFX_TEX_OUT :=		$(FRONTEND_GFX_OUT_DIR)/frontend.Spr
FRONTEND_GFX_REP_FILE :=	$(REPORT_DIR)/frontend.rep
FRONTEND_GFX_HDR_FILE :=	$(INC_DIR)/frontend.h

cleanfrontend :
		@$(RM) -f $(FRONTEND_GFX_TEX_OUT)
		@$(ECHO) Frontend Cleaned

frontend:	$(FRONTEND_GFX_TEX_IN)

$(FRONTEND_GFX_TEX_OUT) :	$(FRONTEND_GFX_TEX_IN)
		@parkgrab -r- -z+ ${FRONTEND_GFX_TRANS_NO_ROT_IN} -r+ ${FRONTEND_GFX_TRANS_IN} -z- ${FRONTEND_GFX_NONTRANS_IN} -b+ -t:30,1,1 -l:$(REPORT_DIR)/frontend.lbm -o:$(FRONTEND_GFX_TEX_OUT) -k:$(FRONTEND_GFX_REP_FILE)
		@$(MV) -f $(FRONTEND_GFX_OUT_DIR)/frontend.h $(FRONTEND_GFX_HDR_FILE)

GRAF_DIRS_TO_MAKE	+=		$(FRONTEND_GFX_OUT_DIR)
GFX_DATA_OUT		+=		$(FRONTEND_GFX_TEX_OUT)


#----------------------------------------------------------------------------
# Big TGA backdrops
#----------------------------------------------------------------------------
BACKDROPS_IN_DIR :=		$(GRAF_DIR)/backdrop
BACKDROPS_IN :=			credits sky

BACKDROPS_OUT_DIR :=	$(DATA_OUT)/backdrop
BACKDROPS_OUT :=		$(foreach SCREEN,$(BACKDROPS_IN),$(BACKDROPS_OUT_DIR)/$(SCREEN).gfx)

backdrops : $(BACKDROPS_OUT)

cleanbackdrops :
		@$(RM) -f $(BACKDROPS_OUT)
		@$(ECHO) Backdrops Cleaned

$(BACKDROPS_OUT_DIR)/%.gfx : $(BACKDROPS_IN_DIR)/%.tga
	@$(TGA2GFX) $< $@

GRAF_DIRS_TO_MAKE +=	$(BACKDROPS_OUT_DIR)
GFX_DATA_OUT +=			$(BACKDROPS_OUT)


#----------------------------------------------------------------------------
# Sound FX
#----------------------------------------------------------------------------
SFX_IN_DIR :=		data/SFX
SFX_OUT_DIR :=		$(DATA_OUT)/SFX

SFX_LIST :=			ingame

SFX_ALL_IN :=		$(foreach SFX,$(SFX_LIST),$(SFX_IN_DIR)/$(SFX)/$(SFX).PXM $(SFX_IN_DIR)/$(SFX)/$(SFX).VH $(SFX_IN_DIR)/$(SFX)/$(SFX).VB)
SFX_ALL_OUT :=		$(foreach SFX,$(SFX_LIST),$(SFX_OUT_DIR)/$(SFX).PXM $(SFX_OUT_DIR)/$(SFX).VH $(SFX_OUT_DIR)/$(SFX).VB)

sfx: 	$(SFX_ALL_OUT)

cleansfx:
		@$(RM) -f $(SFX_ALL_OUT)
		@$(ECHO) SFX Cleaned

$(SFX_ALL_OUT) : $(SFX_ALL_IN)
	@$(CP) $(SFX_ALL_IN) $(SFX_OUT_DIR)
	@$(ATTRIB) -r $(SFX_ALL_OUT)

GRAF_DIRS_TO_MAKE	+=	$(SFX_OUT_DIR)
GFX_DATA_OUT		+=	$(SFX_ALL_OUT)


#----------------------------------------------------------------------------
# Memcard file header
#----------------------------------------------------------------------------
MC_HEADER_IN_DIR :=	$(GAME_DATA_DIR)/memcard
MC_HEADER_IN :=		$(MC_HEADER_IN_DIR)/memhead.bin

MC_HEADER_OUT_DIR :=$(DATA_OUT)/memcard
MC_HEADER_OUT :=	$(MC_HEADER_OUT_DIR)/memhead.bin

mcheader:	$(MC_HEADER_OUT)

cleanmcheader:
	@$(RM) -f $(MC_HEADER_OUT)
	@$(ECHO) MemCard Header Cleaned

$(MC_HEADER_OUT) : $(MC_HEADER_IN)
	@$(CP) $(MC_HEADER_IN) $(MC_HEADER_OUT)

GRAF_DIRS_TO_MAKE	+= $(MC_HEADER_OUT_DIR)
GFX_DATA_OUT		+= $(MC_HEADER_OUT)	


#----------------------------------------------------------------------------
# Music
#----------------------------------------------------------------------------
MUSIC_IN_DIR :=		data/music
MUSIC_OUT_DIR :=	$(DATA_OUT)/music

MUSIC_LIST :=		sb-title \
					chapter1 chapter2 chapter3 chapter4 chapter5 chapter6

MUSIC_ALL_IN :=		$(foreach MUSIC,$(MUSIC_LIST),$(MUSIC_IN_DIR)/$(MUSIC)/$(MUSIC).PXM $(MUSIC_IN_DIR)/$(MUSIC)/$(MUSIC).VH $(MUSIC_IN_DIR)/$(MUSIC)/$(MUSIC).VB)
MUSIC_ALL_OUT :=	$(foreach MUSIC,$(MUSIC_LIST),$(MUSIC_OUT_DIR)/$(MUSIC).PXM $(MUSIC_OUT_DIR)/$(MUSIC).VH $(MUSIC_OUT_DIR)/$(MUSIC).VB)

music: 	$(MUSIC_ALL_OUT)

cleanmusic:
	@$(RM) -f $(MUSIC_ALL_OUT)
	@$(ECHO) Music Cleaned

$(MUSIC_ALL_OUT) : $(MUSIC_ALL_IN)
	@$(CP) $(MUSIC_ALL_IN) $(MUSIC_OUT_DIR)
	@$(ATTRIB) -r $(MUSIC_ALL_OUT)

GRAF_DIRS_TO_MAKE	+=	$(MUSIC_OUT_DIR)
GFX_DATA_OUT		+=	$(MUSIC_ALL_OUT)


#----------------------------------------------------------------------------
# Script stuff..
#----------------------------------------------------------------------------
SCRIPTS_LIST		:=	test \
						speechtest

SCRIPTS_IN_DIR		:=	$(GAME_DATA_DIR)/scripts

SCRIPTS_OUT_DIR		:=	$(DATA_OUT)/scripts
SCRIPTS_OUT			:=	$(foreach SCRIPT,$(SCRIPTS_LIST),$(SCRIPTS_OUT_DIR)/$(SCRIPT).dat)

scripts : $(SCRIPTS_OUT)

cleanscripts:
	@$(RM) -f $(SCRIPTS_OUT)
	@$(ECHO) Scripts Cleaned

# Saves a lot of hassle to make the scripts dependant upon the text database too..
$(SCRIPTS_OUT_DIR)/%.dat : $(SCRIPTS_IN_DIR)/%.scr $(SCRIPT_TRANS_HDR)
	@scripter $< $@

GRAF_DIRS_TO_MAKE	+=	$(SCRIPTS_OUT_DIR)
GFX_DATA_OUT		+=	$(SCRIPTS_OUT)


#----------------------------------------------------------------------------
# Demo mode data
#----------------------------------------------------------------------------
DEMO_IN_DIR :=		data/demo
DEMO_OUT_DIR :=	$(DATA_OUT)/demo

DEMO_LIST :=		demo____

DEMO_ALL_IN :=		$(foreach DEMO,$(DEMO_LIST),$(DEMO_IN_DIR)/$(DEMO).dmo)
DEMO_ALL_OUT :=		$(foreach DEMO,$(DEMO_LIST),$(DEMO_OUT_DIR)/$(DEMO).dmo)

demo: 		$(DEMO_ALL_OUT)

cleandemo:
	@$(RM) -f $(DEMO_ALL_OUT)
	@$(ECHO) Demo Cleaned

$(DEMO_ALL_OUT) : $(DEMO_ALL_IN)
	@$(CP) $(DEMO_ALL_IN) $(DEMO_OUT_DIR)
	@$(ATTRIB) -r $(DEMO_ALL_OUT)

GRAF_DIRS_TO_MAKE	+=	$(DEMO_OUT_DIR)
GFX_DATA_OUT		+=	$(DEMO_ALL_OUT)


#----------------------------------------------------------------------------
# Dirs to Make
#----------------------------------------------------------------------------

GRAF_DIRS_TO_MAKE +=	$(TRANS_OUT_DIR) \
						$(UI_GFX_OUT_DIR) \
						$(ACTORS_DIRS_TO_MAKE) \
						$(ANIM_OUT_DIR) \
						$(LEVELS_DIRS_TO_MAKE)

gdirs : $(GRAF_DIRS_TO_MAKE)

$(GRAF_DIRS_TO_MAKE) :
	@$(MKDIR) -p $(GRAF_DIRS_TO_MAKE)
	@$(ECHO) Created directories $(GRAF_DIRS_TO_MAKE)


#----------------------------------------------------------------------------
#	Build the Biflump file
#----------------------------------------------------------------------------
.PHONY: biglump cleanbiglump

BIGLUMP_IN :=		$(GFX_DATA_OUT)
BIGLUMP_OUT :=		$(VERSION_DIR)/BigLump.Bin
BIGLUMP_INC :=		$(INC_DIR)/BigLump.h

biglump : $(BIGLUMP_OUT)

cleanbiglump :
	@$(RM) -f $(BIGLUMP_OUT)
	@$(GLECHO) BigLump Cleaned

$(BIGLUMP_OUT) : $(BIGLUMP_IN)
	@$(MAKEDATA) -b:$(OUT_DIR)/Data/ -s:$(GAME_DATA_DIR)/DataCache.Scr -o:$(BIGLUMP_OUT) -i:$(BIGLUMP_INC)

#	@$(REDIR) $(TEMP_DIR)/BigLump.Scr $(BIGLUMP_IN)
#	$(MAKEDATA) -b:$(OUT_DIR)/Data/ -s:$(GAME_DATA_DIR)/DataCache.Scr -s:$(TEMP_DIR)/BigLump.Scr -o:$(BIGLUMP_OUT) -i:$(BIGLUMP_INC)

# All files MUST be in datacache.scr now :oP

#----------------------------------------------------------------------------
#	Where it all happens
#----------------------------------------------------------------------------

# WARNING !!!! BigLump must be the last item that all is dependant on. GRL !!!!

all : 	dirs gdirs \
		actors \
		anims \
		levels \
		biglump
		@$(ECHO) Graphics made

#----------------------------------------------------------------------------
# end